{"version":3,"sources":["components/Message/Message.tsx","components/Table/Row.tsx","components/Table/Table.tsx","components/UploadCSV/UploadCSV.tsx","utils/validationRules.ts","utils/transform.ts","utils/validation.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Message","message","className","Row","elements","data","map","element","key","hasError","value","Table","headers","length","headersElements","bodyElements","UploadCSV","onLoad","onError","type","accept","multiple","onChange","e","files","target","file","test","name","reader","FileReader","onload","csvJson","rows","split","temp","forEach","row","cols","col","trim","replace","toString","push","csvToJson","result","readAsText","handleChange","isValidAge","age","isValidYearlyIncome","yearlyIncome","isValidExpirationDate","expirationDate","Date","isValidPhone","phone","isValidEmail","email","isValidHasChildren","hasChildren","isValidLicenseNumber","licenseNumber","formatYearlyIncome","toFixed","formatLicenseStates","licenseStates","licenseStatesArray","newLicenseStatesArray","reduction","JSON","parse","stringify","UsaStatesJson","join","formatPhone","matched","match","findDuplicate","uniqueIndex","currentRow","currentRowIndex","newRow","i","searchRow","some","toLowerCase","duplicatedWithIndex","returnObject","validator","formatter","validateData","headerTransformed","index","ageIndex","indexOf","experience","hasRequiredFieldsInRow","body","requireIndex","every","bodyRow","value1","getIndex","forData","fromData","getSeparatedData","App","useState","table","setTable","error","setError","handleSuccess","require","unique","onSuccess","requiredFields","required","field","filter","includes","hasRequiredFields","transformedHeaders","bodyAfterValidation","validation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3dea6d97.chunk.js","sourcesContent":["import React, {FC} from \"react\"\r\nimport './message.css'\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message:FC<MessagePropsType> = ({message = 'File format is not correct!'}) => {\r\n    return (\r\n        <div className={'container'}>\r\n            <div className={'message'}>{message}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React, {FC} from \"react\"\r\nimport {TableValues} from \"./Table\";\r\n\r\ntype RowPropsType = {\r\n    data: Array<TableValues>\r\n}\r\nconst Row: FC<RowPropsType> = ({data}) => {\r\n    const elements = data.map((element, key) => {\r\n        return (\r\n            <td key={key} className={element.hasError ? 'warning' : ''}>\r\n                {element.value}\r\n            </td>\r\n        )\r\n    })\r\n    return <tr>{elements}</tr>\r\n}\r\n\r\nexport default Row\r\n","import React, {FC} from \"react\"\r\nimport Row from \"./Row\"\r\nimport './table.css'\r\n\r\nexport type TableValues = {\r\n    value: string,\r\n    hasError?: boolean,\r\n}\r\n\r\nexport type TablePropsType = {\r\n    headers: Array<string>,\r\n    data: Array<Array<TableValues>>\r\n}\r\n\r\nconst Table: FC<TablePropsType> = ({headers, data}) => {\r\n    if (headers.length === 0 || data.length === 0) {\r\n        return <div>Data Empty</div>\r\n    }\r\n\r\n    const headersElements = headers.map((element, key) => {\r\n        return <th key={key}>{element}</th>\r\n    })\r\n\r\n    const bodyElements = data.map((element, key) => {\r\n        return <Row key={key} data={element}/>\r\n    })\r\n\r\n    return (\r\n        <table className={'table'}>\r\n            <thead>\r\n            <tr>\r\n                {headersElements}\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n                {bodyElements}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, {FC} from \"react\"\r\nimport './upload.css'\r\n\r\ntype UploadCSVPropsType = {\r\n    onLoad: (data: Array<Array<string>>) => void,\r\n    onError: (error: string) => void\r\n}\r\n\r\nconst UploadCSV: FC<UploadCSVPropsType> = ({onLoad, onError}) => {\r\n    const isValidFileType = (file: File) => {\r\n        const regexp = /.+(\\.csv)$/\r\n        return regexp.test(file.name)\r\n    }\r\n    const csvToJson = (data: string) => {\r\n        let rows = data.split('\\n')\r\n        const temp: Array<any> = []\r\n\r\n        rows.forEach((row) => {\r\n            let cols = row.split(',')\r\n            // if not empty add to array\r\n            if (cols.length > 1) {\r\n                // remove extra spaces\r\n                cols = cols.map(col => {\r\n                    return col.trim().replace(/ +/g, ' ').toString()\r\n                })\r\n                temp.push(cols)\r\n            }\r\n        })\r\n\r\n        return temp\r\n    }\r\n    // const destructureJson = (data: Array<string>) => {\r\n    //     let csvHeader: any = []\r\n    //     let csvData: any = []\r\n    //     data.forEach((element, key) => {\r\n    //         if (key === 0) {\r\n    //             csvHeader = element\r\n    //         } else {\r\n    //             csvData.push(element)\r\n    //         }\r\n    //     })\r\n    //     return {\r\n    //         fields: csvHeader,\r\n    //         data: csvData\r\n    //     }\r\n    // }\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const files = e.target.files\r\n\r\n        if (!files || files.length === 0) {\r\n            onError('Select file')\r\n            return\r\n        }\r\n        if (!isValidFileType(files[0])) {\r\n            onError('File format is not correct')\r\n            return\r\n        }\r\n\r\n        let reader = new FileReader()\r\n        reader.onload = () => {\r\n            let csvString = reader.result as string\r\n            let csvJson = csvToJson(csvString)\r\n            onError('')\r\n            onLoad(csvJson)\r\n            // onLoad(destructureJson(csvJson))\r\n        }\r\n        reader.readAsText(files[0])\r\n    }\r\n\r\n    return (\r\n        <div className={'upload'}>\r\n            <label className={'customFileUpload'}>\r\n                <input type=\"file\"\r\n                       accept={'.csv, text/csv'}\r\n                       multiple={false}\r\n                       onChange={e => handleChange(e)}\r\n                    // hidden\r\n                />\r\n                <i className={''}>Import Users</i>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UploadCSV\r\n","// Finish\r\nexport const isValidAge = (age: number) => (age >= 21)\r\nexport const isValidExperience = (age: number, experience: number) => ((experience >= 0) && (experience < age))\r\nexport const isValidYearlyIncome = (yearlyIncome: number) => ((yearlyIncome >= 0) && (yearlyIncome <= 1e6))\r\nexport const isValidExpirationDate = (expirationDate: string) => {\r\n    const reg1 = /^\\d{4}-\\d{2}-\\d{2}$/  // YYYY-MM-DD\r\n    const reg2 = /^\\d{2}\\/\\d{2}\\/\\d{4}$/  // MM/DD/YYYY\r\n    // Has wrong format\r\n    if (!reg1.test(expirationDate) && !reg2.test(expirationDate)) {\r\n        return false\r\n    }\r\n    const inputDate = new Date(expirationDate)\r\n    const curentDate = new Date()\r\n    // Is bigger than current date\r\n    return inputDate > curentDate\r\n}\r\nexport const isValidPhone = (phone: string) => {\r\n    const regexp = /(^\\d{10}$)|(^[1]{1}\\d{10}$)|(^[+][1]{1}\\d{10}$)/\r\n    return regexp.test(phone)\r\n}\r\nexport const isValidEmail = (email: string) => {\r\n    const regexp = /^[\\w-.]+@[\\w-]+.+[\\w-]{2,4}$/\r\n    return regexp.test(email)\r\n}\r\nexport const isValidHasChildren = (hasChildren: string) => {\r\n    return ((hasChildren === 'TRUE') || (hasChildren === 'FALSE') || (hasChildren === ''))\r\n}\r\nexport const isValidLicenseNumber = (licenseNumber: string) => {\r\n    // Must have 6 digits or letters\r\n    const regexp = /^\\w{6}$/\r\n    return regexp.test(licenseNumber);\r\n}\r\nexport const isEmptyValue = (value: string) => (value === '')\r\n","import UsaStatesJson from \"./usaStates.json\";\r\n\r\nexport const formatYearlyIncome = (yearlyIncome: string) => {\r\n    return ((+yearlyIncome).toFixed(2))\r\n}\r\nexport const formatLicenseStates = (licenseStates: string) => {\r\n    const licenseStatesArray = licenseStates.trim().replace(/ +/g, '').split('|')\r\n    const newLicenseStatesArray: Array<string> = [];\r\n\r\n    licenseStatesArray.forEach((e) => {\r\n        if (e.length > 2) {\r\n            let reduction = JSON.parse(JSON.stringify(UsaStatesJson))[e]\r\n            if (reduction) {\r\n                newLicenseStatesArray.push(reduction)\r\n            }\r\n        } else {\r\n            newLicenseStatesArray.push(e)\r\n        }\r\n    })\r\n    return newLicenseStatesArray.join(', ')\r\n}\r\nexport const formatPhone = (phone: string) => {\r\n    const regexp = /[0-9]{10}$/\r\n    const matched = phone.match(regexp)\r\n    if(matched){\r\n        return `+1${matched[0]}`\r\n    }else{\r\n        return phone\r\n    }\r\n\r\n}\r\n","import {\r\n    isEmptyValue,\r\n    isValidAge,\r\n    isValidEmail,\r\n    isValidExperience, isValidExpirationDate, isValidHasChildren, isValidLicenseNumber,\r\n    isValidPhone,\r\n    isValidYearlyIncome\r\n} from \"./validationRules\"\r\nimport {formatLicenseStates, formatPhone, formatYearlyIncome} from \"./transform\";\r\n\r\n// Main function\r\nexport const validation = (\r\n    data: Array<Array<string>>,\r\n    require: Array<string>,\r\n    unique: Array<string>,\r\n    onError: (e: string) => void,\r\n    onSuccess: (data: any) => void\r\n) => {\r\n    if (!data || data.length < 2) {\r\n        onError('Not correct data')\r\n        return\r\n    }\r\n    // Has required fields in header?\r\n    if (!hasRequiredFields(require, data[0])) {\r\n        onError('Error Required Fields')\r\n        return\r\n    }\r\n    const {headers, body} = getSeparatedData(data)\r\n    const requireIndex = getIndex(require, headers)\r\n\r\n    if (!hasRequiredFieldsInRow(body, requireIndex)) {\r\n        onError('Error Required Fields')\r\n        return\r\n    }\r\n\r\n    const transformedHeaders = headers.map((value,) => {\r\n        return value.toLowerCase().replace(/ +/g, '_')\r\n    })\r\n    const uniqueIndex = getIndex(unique, headers)\r\n    // Step 1 Validate\r\n    const bodyAfterValidation = validateData(body, transformedHeaders)\r\n    // Step 2 Find Duplication fields\r\n    const newBody = findDuplicate(bodyAfterValidation, uniqueIndex)\r\n    const newHeaders = ['ID', ...headers, 'Duplicate with']\r\n    onSuccess({data: newBody, headers: newHeaders})\r\n}\r\n\r\n// Function which search first duplicate row\r\nconst findDuplicate = (data: Array<Array<{ value: string }>>, uniqueIndex: Array<number>) => {\r\n    return data.map((currentRow, currentRowIndex) => {\r\n        // For each Row in Array\r\n        const currentId = currentRowIndex + 1\r\n        let newRow = [{value: `${currentId}`}, ...currentRow, {value: ''}];\r\n\r\n        for (let i = currentRowIndex + 1; i < data.length; i++) {\r\n            const searchRow = data[i]\r\n\r\n            const hasDuplicate = uniqueIndex.some((key) => {\r\n                const current = currentRow[key].value.toLowerCase()\r\n                const search = searchRow[key].value.toLowerCase()\r\n\r\n                return current === search\r\n            })\r\n\r\n            if (hasDuplicate) {\r\n                // If find duplicated fields, write ID & Start for new row\r\n                const duplicatedWithIndex = newRow.length - 1\r\n                newRow[duplicatedWithIndex].value = `${i + 1}`\r\n                break\r\n            }\r\n        }\r\n        return newRow\r\n    })\r\n}\r\n\r\nconst returnObject = (value: string, validator: (value: any) => any, formatter?: (value: any) => any) => {\r\n    if (validator(value)) {\r\n        let data = value\r\n        if (formatter) {\r\n            data = formatter(value)\r\n        }\r\n        return {value: data}\r\n    } else {\r\n        return {value: value, hasError: true}\r\n    }\r\n}\r\nconst validateData = (data: Array<Array<string>>, headerTransformed: Array<string>) => {\r\n    return data.map((row) => {\r\n        // For each row in array\r\n        return row.map((value, index) => {\r\n            switch (headerTransformed[index]) {\r\n                case 'phone':\r\n                    return returnObject(value, isValidPhone, formatPhone)\r\n                case 'email':\r\n                    return returnObject(value, isValidEmail)\r\n                case 'age':\r\n                    return returnObject(value, isValidAge)\r\n                case 'experience':\r\n                    const ageIndex = headerTransformed.indexOf('age')\r\n                    if (!isValidAge(+row[ageIndex])) {\r\n                        return {value: value, hasError: true}\r\n                    } else {\r\n                        if (isValidExperience(+row[ageIndex], +value)) {\r\n                            return {value: value}\r\n                        } else {\r\n                            return {value: value, hasError: true}\r\n                        }\r\n                    }\r\n                case 'yearly_income':\r\n                    return returnObject(value, isValidYearlyIncome, formatYearlyIncome)\r\n                case 'has_children':\r\n                    return returnObject(value, isValidHasChildren)\r\n                case 'license_states':\r\n                    return returnObject(value,e => e  ,formatLicenseStates)\r\n                case 'expiration_date':\r\n                    return returnObject(value, isValidExpirationDate)\r\n                case 'license_number':\r\n                    return returnObject(value, isValidLicenseNumber)\r\n                default:\r\n                    return {value: value}\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nconst hasRequiredFieldsInRow = (body: Array<Array<string>>, requireIndex: Array<number>) => {\r\n    return body.every((bodyRow) => {\r\n        return requireIndex.every((value1,) => {\r\n            return !isEmptyValue(bodyRow[value1])\r\n        })\r\n    })\r\n}\r\n\r\nconst getIndex = (forData: Array<string>, fromData: Array<string>) => {\r\n    return forData.map((value) => {\r\n        return fromData.indexOf(value)\r\n    })\r\n}\r\n// function for separating input data\r\n// return object with header & body\r\nconst getSeparatedData = (data: Array<Array<string>>) => {\r\n    let headers: Array<string> = []\r\n    let body: Array<Array<string>> = []\r\n\r\n    data.forEach((value, index) => {\r\n        if (index === 0) {\r\n            headers = value\r\n        } else {\r\n            body.push(value)\r\n        }\r\n    })\r\n\r\n    return {headers, body}\r\n}\r\n\r\nexport function hasRequiredFields(requiredFields: Array<string>, data: Array<string>) {\r\n    const required = requiredFields.map(field => field.toLowerCase())\r\n    const temp = data.filter(field => required.includes(field.toLowerCase()))\r\n    return required.length === temp.length\r\n}\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Message from './components/Message/Message';\r\nimport Table, {TablePropsType} from \"./components/Table/Table\";\r\nimport UploadCSV from './components/UploadCSV/UploadCSV';\r\nimport {validation} from \"./utils/validation\";\r\n\r\nfunction App() {\r\n  const [table, setTable] = useState<TablePropsType>({headers: [], data: []})\r\n  const [error, setError] = useState('Select file')\r\n\r\n  const handleSuccess = (data: any) => {\r\n    setTable(data)\r\n  }\r\n\r\n  const onLoad = (data: Array<Array<string>>) => {\r\n    const required = ['Full Name', 'Phone', 'Email']\r\n    const unique = ['Phone', 'Email']\r\n    validation(data, required, unique, setError, handleSuccess)\r\n  }\r\n\r\n  return (\r\n      <div className=\"App\">\r\n        <UploadCSV onLoad={onLoad} onError={setError}/>\r\n        {error && <Message message={error}/>}\r\n        {!error\r\n        && table\r\n        && <Table headers={table.headers} data={table.data}/>\r\n        }\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}